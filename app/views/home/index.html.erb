<head>
  <script src="//maps.google.com/maps/api/js?key=AIzaSyCMPe5C0yTvu9AGXdeFSD-AIwo5eilQUis"></script>
  <script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js" type='text/javascript'></script>
  <script src='//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'></script>
  <%= javascript_include_tag :application %>
</head>

<body>
  <div style='width: 100%; height: 100vh'>
    <div id="map" style='width: 100%; height: 100%;'></div>
  </div>
</body>


<script>
  
  var handler = Gmaps.build('Google');
  var mapStyle = [{"featureType":"water","elementType":"geometry","stylers":[{"hue":"#165c64"},{"saturation":34},{"lightness":-69},{"visibility":"on"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"hue":"#b7caaa"},{"saturation":-14},{"lightness":-18},{"visibility":"on"}]},{"featureType":"landscape.man_made","elementType":"all","stylers":[{"hue":"#cbdac1"},{"saturation":-6},{"lightness":-9},{"visibility":"on"}]},{"featureType":"road","elementType":"geometry","stylers":[{"hue":"#8d9b83"},{"saturation":-89},{"lightness":-12},{"visibility":"on"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"hue":"#d4dad0"},{"saturation":-88},{"lightness":54},{"visibility":"simplified"}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"hue":"#bdc5b6"},{"saturation":-89},{"lightness":-3},{"visibility":"simplified"}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"hue":"#bdc5b6"},{"saturation":-89},{"lightness":-26},{"visibility":"on"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"hue":"#c17118"},{"saturation":61},{"lightness":-45},{"visibility":"on"}]},{"featureType":"poi.park","elementType":"all","stylers":[{"hue":"#8ba975"},{"saturation":-46},{"lightness":-28},{"visibility":"on"}]},{"featureType":"transit","elementType":"geometry","stylers":[{"hue":"#a43218"},{"saturation":74},{"lightness":-51},{"visibility":"simplified"}]},{"featureType":"administrative.province","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":0},{"lightness":100},{"visibility":"simplified"}]},{"featureType":"administrative.neighborhood","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":0},{"lightness":100},{"visibility":"off"}]},{"featureType":"administrative.locality","elementType":"labels","stylers":[{"hue":"#ffffff"},{"saturation":0},{"lightness":100},{"visibility":"off"}]},{"featureType":"administrative.land_parcel","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":0},{"lightness":100},{"visibility":"off"}]},{"featureType":"administrative","elementType":"all","stylers":[{"hue":"#3a3935"},{"saturation":5},{"lightness":-57},{"visibility":"off"}]},{"featureType":"poi.medical","elementType":"geometry","stylers":[{"hue":"#cba923"},{"saturation":50},{"lightness":-46},{"visibility":"on"}]}]
  var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';
  var icons = { //Reference: http://kml4earth.appspot.com/icons.html
    person: iconBase + 'man.png',
    dining: iconBase + 'dining.png',
    coffee: iconBase + 'coffee.png',
  };

  handler.buildMap(
    {
      provider: {
        disableDefaultUI: true, // pass in other Google Maps API options here
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        zoom: 15,
        styles: mapStyle,
        //types: ['restaurant']
      },
      internal: {id: 'map'}
    },
  
    function(){
      // Get user location
      if(navigator.geolocation) //If we can get their location, set their location
      {
        navigator.geolocation.getCurrentPosition(displayUserOnMap);
      }
      else // If we can't set their location, just simulate it
      {
        displayUserOnMap( { lat: 38.905374, lng: -104.818371} ); //Default User location inside University Village
      }
      
      //Show Markers
      var markers = handler.addMarkers(buildExample());
      handler.bounds.extendWith(markers);
      handler.fitMapToBounds(); 
    }
  );
  
  function buildExample()
  {
    return [
      buildMarker( 38.904813, -104.819010, icons["dining"], "Il Vicino"),
      buildMarker( 38.904365, -104.818479, icons["dining"], "Panera Bread"),
      buildMarker( 38.904318, -104.818078, icons["dining"], "Smash Burger"),
      buildMarker( 38.904531, -104.817729, icons["dining"], "Hacienda"),
      buildMarker( 38.913437, -104.814788, icons["coffee"], "Jives"),
    ];
  }
  
  function buildMarker(latitude, longitude, pictureURL, info)
  {
    // Documentation: https://developers.google.com/maps/documentation/static-maps/
    return marker = {
      lat: latitude,
      lng: longitude,
      picture: {
        url: pictureURL, // NULL is fine for pictureURL returns default red pin
        width: 64,
        height: 64
      },
      infowindow: info
    }
  }
  
  function displayMarkersOnMap(markers){
    var marker = handler.addMarkers(markers); 
    
    handler.bounds.extendWith(marker);
    fitMapToBounds();
  }
  
  function displayUserOnMap(position){
    //Draw Person
    var userPos = handler.addMarker({
      lat: position.coords.latitude,
      lng: position.coords.longitude,
      picture: {
        url: icons["person"],
        width: 64,
        height: 64
      },
    });
    
    handler.bounds.extendWith(userPos);
    handler.fitMapToBounds(); 
    
    //Draw "Search" Range
    //drawCircle(position.coords.latitude, position.coords.longitude, 10000, "blue");
  };
  
  function drawCircle(latitude, longitude, radius, color)
  {
    var circle = handler.addCircles(
      [{
        lat: latitude,
        lng: longitude,
        radius: radius
      }],
      { strokeColor: color}
    );
  }
  
</script>