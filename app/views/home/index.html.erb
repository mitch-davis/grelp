<head>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous">
  <script src="//maps.google.com/maps/api/js?key=AIzaSyCMPe5C0yTvu9AGXdeFSD-AIwo5eilQUis"></script>
  <script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js" type='text/javascript'></script>
  <script src='//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'></script>
  <%= javascript_include_tag :application %>
</head>

<body>
  <div id="informationId" data-position="false" style="display: none;">
    <p id="positionId">Position: False</p>
    <p id="cookieId">Cookie: False</p>
  </div>
  <div style='width: 100%; height: 95vh' class="map-section">
    <div id="map" style='width: 100%; height: 100%;'></div>
  </div>
  <div style='width: 100%; height: 5vh' class="bottom-bar">
    <a href="/business/">Restaurants Near Me</a>
  </div>
</body>


<script>

  var handler = Gmaps.build('Google');
  var mapStyle = [{"featureType":"water","elementType":"geometry","stylers":[{"hue":"#165c64"},{"saturation":34},{"lightness":-69},{"visibility":"on"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"hue":"#b7caaa"},{"saturation":-14},{"lightness":-18},{"visibility":"on"}]},{"featureType":"landscape.man_made","elementType":"all","stylers":[{"hue":"#cbdac1"},{"saturation":-6},{"lightness":-9},{"visibility":"on"}]},{"featureType":"road","elementType":"geometry","stylers":[{"hue":"#8d9b83"},{"saturation":-89},{"lightness":-12},{"visibility":"on"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"hue":"#d4dad0"},{"saturation":-88},{"lightness":54},{"visibility":"simplified"}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"hue":"#bdc5b6"},{"saturation":-89},{"lightness":-3},{"visibility":"simplified"}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"hue":"#bdc5b6"},{"saturation":-89},{"lightness":-26},{"visibility":"on"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"hue":"#c17118"},{"saturation":61},{"lightness":-45},{"visibility":"on"}]},{"featureType":"poi.park","elementType":"all","stylers":[{"hue":"#8ba975"},{"saturation":-46},{"lightness":-28},{"visibility":"on"}]},{"featureType":"transit","elementType":"geometry","stylers":[{"hue":"#a43218"},{"saturation":74},{"lightness":-51},{"visibility":"simplified"}]},{"featureType":"administrative.province","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":0},{"lightness":100},{"visibility":"simplified"}]},{"featureType":"administrative.neighborhood","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":0},{"lightness":100},{"visibility":"off"}]},{"featureType":"administrative.locality","elementType":"labels","stylers":[{"hue":"#ffffff"},{"saturation":0},{"lightness":100},{"visibility":"off"}]},{"featureType":"administrative.land_parcel","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":0},{"lightness":100},{"visibility":"off"}]},{"featureType":"administrative","elementType":"all","stylers":[{"hue":"#3a3935"},{"saturation":5},{"lightness":-57},{"visibility":"off"}]},{"featureType":"poi.medical","elementType":"geometry","stylers":[{"hue":"#cba923"},{"saturation":50},{"lightness":-46},{"visibility":"on"}]}]
  var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';
  var icons = { //Reference: http://kml4earth.appspot.com/icons.html
    person: iconBase + 'man.png',
    dining: iconBase + 'dining.png',
    coffee: iconBase + 'coffee.png',
  };
  var defaultUserPos = { lat: 38.905374, lng: -104.818371 }; // Default User location inside University Village
  var searchRange = 10000; // Set how far to "search". Later, we can implement to change this by user input.
  var info = {
    il_vicino: {name: "Il Vicino", content: "Il Vicino has some good pizza... and wine... lots of wine... mmm."},
    panera_bread: {name: "Panera Bread", content: "Meh it's alright."},
    smashburger: {name: "Smash Burger", content: "The best burgers, for the best price!"},
    hacienda: {name: "Hacienda", content: "The best mexican food you'll find near campus!"},
    jives: {name: "Jives", content: "Jives the most hippityhoppist coffee place in the town, breh."},
  };

  handler.buildMap(
    {
      provider: {
        disableDefaultUI: true, // pass in other Google Maps API options here
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        zoom: 15,
        styles: mapStyle,
        //types: ['restaurant']
      },
      internal: {id: 'map'}
    },

    function(){
      // Get user location
      if(navigator.geolocation) //If we can get their location, set their location
      {
        navigator.geolocation.getCurrentPosition(displayUserOnMap, displayUserOnMap);
      }
      else // If we can't set their location, just simulate it
      {
        displayUserOnMap( defaultUserPos );
      }

      //Show Markers
      var markers = handler.addMarkers(buildExample());
      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
      
      //Debug, display if a cookie exists of the user's location
      var x = readCookie("GrelpLocation");
      if (x) {
          document.getElementById("cookieId").textContent="Cookie: True - "+x;
      }
    }
  );

  function buildExample()
  {
    return [
      buildMarker( 38.904813, -104.819010, icons["dining"], buildInfo(info["il_vicino"], '<%= asset_path('il_vicino.png') %>') ),
      buildMarker( 38.904365, -104.818479, icons["dining"], buildInfo(info["panera_bread"], '<%= asset_path('panera_bread.png') %>') ),
      buildMarker( 38.904318, -104.818078, icons["dining"], buildInfo(info["smashburger"], '<%= asset_path('smashburger.png') %>') ),
      buildMarker( 38.904531, -104.817729, icons["dining"], buildInfo(info["hacienda"], '<%= asset_path('hacienda.jpg') %>') ),
      buildMarker( 38.913437, -104.814788, icons["coffee"], buildInfo(info["jives"], '<%= asset_path('jives.jpg') %>') ),
    ];
  }

  function buildMarker(latitude, longitude, pictureURL, info)
  {
    // Documentation: https://developers.google.com/maps/documentation/static-maps/
    return marker = {
      lat: latitude,
      lng: longitude,
      picture: {
        url: pictureURL, // NULL is fine for pictureURL returns default red pin
        width: 64,
        height: 64
      },
      infowindow: info
    }
  }
  function buildCustomMarker(latitude, longitude, pictureURL, info) //NOT FUNCTIONAL YET
  {
    return marker = {
      lat: latitude,
      lng: longitude,
      picture: {
        url: pictureURL, // NULL is fine for pictureURL returns default red pin
        width: 64,
        height: 64
      },
      custom_infowindow: info
    }
  }

  function displayMarkersOnMap(markers){
    var marker = handler.addMarkers(markers);

    handler.bounds.extendWith(marker);
    fitMapToBounds();
  }

  function displayUserOnMap(position){
    var lat, lng;

    //Draw Person
    if(position.coords){ // If we got a location
      var userPos = handler.addMarker({
        lat: position.coords.latitude,
        lng: position.coords.longitude,
        picture: {
          url: icons["person"],
          width: 64,
          height: 64
        },
      });

      lat = position.coords.latitude;
      lng = position.coords.longitude;

      document.getElementById("positionId").textContent="Position: True";
    }
    else{ //Default user to this location
      var userPos = handler.addMarker({
        lat: defaultUserPos.lat,
        lng: defaultUserPos.lng,
        picture: {
          url: icons["person"],
          width: 64,
          height: 64
        },
      });

      document.getElementById("positionId").textContent="Position: Simulated";

      lat = defaultUserPos.lat;
      lng = defaultUserPos.lng;
    }

    handler.bounds.extendWith(userPos);
    handler.fitMapToBounds();
    
    //Create cookie with the user's location
    eraseCookie("GrelpLocation");
    createCookie("GrelpLocation", lat+","+lng, 0);

    //Draw "Search" Range
    drawCircle(lat, lng, searchRange, "blue", 0.5, 2, "blue", 0.075);
  };

  function drawCircle(latitude, longitude, radius, strokeColor, strokeOpacity, strokeWeight,
    fillColor, fillOpacity)
  {
    var circle = handler.addCircle(
      {
        lat: latitude,
        lng: longitude,
        radius: radius
      },
      {
        strokeColor: strokeColor,
        strokeOpacity: strokeOpacity,
        strokeWeight: strokeWeight,
        fillColor: fillColor,
        fillOpacity: fillOpacity
      }
    );
  }

  function buildInfo(info, imagePath)
  { //"Panera Bread <img src='%= asset_path('panera_bread.png') %>' width='90' height='140'> Meh it's alright."),
    var name = info.name + " ";
    imagePath = "<p><c><img src= '" +imagePath +"' width='150' height='140'></c></p>";
    var content = " <p>" + info.content + "</p>";
    console.log(name + imagePath + content);
    return imagePath + content; //Removed name for now. Using logo as the name to show.
  }
  
  //Ref: https://www.quirksmode.org/js/cookies.html
  function createCookie(name,value,days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
  }
  
  function readCookie(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for(var i=0;i < ca.length;i++) {
          var c = ca[i];
          while (c.charAt(0)==' ') c = c.substring(1,c.length);
          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
      }
      return null;
  }
  
  function eraseCookie(name) {
      createCookie(name,"",-1);
  }

</script>